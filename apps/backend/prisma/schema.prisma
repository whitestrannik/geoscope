generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id
  username    String?      @unique
  email       String       @unique
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  guesses     Guess[]
  roomPlayers RoomPlayer[]
  hostedRooms Room[]       @relation("RoomHost")

  @@map("users")
}

model Guess {
  id         String   @id @default(cuid())
  userId     String?  @map("user_id")
  roomId     String?  @map("room_id")
  imageUrl   String   @map("image_url")
  actualLat  Float    @map("actual_lat")
  actualLng  Float    @map("actual_lng")
  guessLat   Float    @map("guess_lat")
  guessLng   Float    @map("guess_lng")
  distance   Float
  score      Int
  mode       String
  roundIndex Int?     @map("round_index")
  createdAt  DateTime @default(now()) @map("created_at")
  room       Room?    @relation(fields: [roomId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])

  @@map("guesses")
}

model Room {
  id                 String       @id @default(cuid())
  hostUserId         String       @map("host_user_id")
  status             RoomStatus   @default(WAITING)
  maxPlayers         Int          @default(6) @map("max_players")
  currentRound       Int          @default(0) @map("current_round")
  totalRounds        Int          @default(5) @map("total_rounds")
  roundTimeLimit     Int?         @map("round_time_limit")
  autoAdvance        Boolean      @default(true) @map("auto_advance")
  resultsDisplayTime Int          @default(20) @map("results_display_time")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  guesses            Guess[]
  players            RoomPlayer[]
  host               User         @relation("RoomHost", fields: [hostUserId], references: [id], onDelete: Cascade)

  @@map("rooms")
}

model RoomPlayer {
  id       String   @id @default(cuid())
  roomId   String   @map("room_id")
  userId   String   @map("user_id")
  joinedAt DateTime @default(now()) @map("joined_at")
  score    Int      @default(0)
  isReady  Boolean  @default(false) @map("is_ready")
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("room_players")
}

enum RoomStatus {
  WAITING
  ACTIVE
  FINISHED
}
